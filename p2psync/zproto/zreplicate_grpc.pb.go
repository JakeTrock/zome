// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: zreplicate.proto

package zproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReSqlite_SendSqlCommand_FullMethodName = "/zproto_interlink.ReSqlite/SendSqlCommand"
)

// ReSqliteClient is the client API for ReSqlite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReSqliteClient interface {
	// Sends a SQL command for processing.
	SendSqlCommand(ctx context.Context, in *SqlCommandRequest, opts ...grpc.CallOption) (*SqlCommandResponse, error)
}

type reSqliteClient struct {
	cc grpc.ClientConnInterface
}

func NewReSqliteClient(cc grpc.ClientConnInterface) ReSqliteClient {
	return &reSqliteClient{cc}
}

func (c *reSqliteClient) SendSqlCommand(ctx context.Context, in *SqlCommandRequest, opts ...grpc.CallOption) (*SqlCommandResponse, error) {
	out := new(SqlCommandResponse)
	err := c.cc.Invoke(ctx, ReSqlite_SendSqlCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReSqliteServer is the server API for ReSqlite service.
// All implementations must embed UnimplementedReSqliteServer
// for forward compatibility
type ReSqliteServer interface {
	// Sends a SQL command for processing.
	SendSqlCommand(context.Context, *SqlCommandRequest) (*SqlCommandResponse, error)
	mustEmbedUnimplementedReSqliteServer()
}

// UnimplementedReSqliteServer must be embedded to have forward compatible implementations.
type UnimplementedReSqliteServer struct {
}

func (UnimplementedReSqliteServer) SendSqlCommand(context.Context, *SqlCommandRequest) (*SqlCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSqlCommand not implemented")
}
func (UnimplementedReSqliteServer) mustEmbedUnimplementedReSqliteServer() {}

// UnsafeReSqliteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReSqliteServer will
// result in compilation errors.
type UnsafeReSqliteServer interface {
	mustEmbedUnimplementedReSqliteServer()
}

func RegisterReSqliteServer(s grpc.ServiceRegistrar, srv ReSqliteServer) {
	s.RegisterService(&ReSqlite_ServiceDesc, srv)
}

func _ReSqlite_SendSqlCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReSqliteServer).SendSqlCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReSqlite_SendSqlCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReSqliteServer).SendSqlCommand(ctx, req.(*SqlCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReSqlite_ServiceDesc is the grpc.ServiceDesc for ReSqlite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReSqlite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zproto_interlink.ReSqlite",
	HandlerType: (*ReSqliteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSqlCommand",
			Handler:    _ReSqlite_SendSqlCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zreplicate.proto",
}
